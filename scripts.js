// 1. Дана строка 'aaa@bbb@ccc'. Замените все @ на ! с помощью глобального 
// поиска и замены.
// {


  // let str = "aaa@bbb@ccc";
  // console.log('aaa@bbb@ccc'.replace(/@/g, '!'));// меняем @ на !

// }
// 2. В переменной date лежит дата в формате 2025-12-31. Преобразуйте эту 
// дату в формат 31/12/2025. 
// {

// let date = "2025-12-31";
// const regex = /^(\d{4})-(\d{2})-(\d{2})$/;
//         // ^ — начало строки
//         // (\d{4}) — группа, соответствующая 4 цифрам (год)
//         // — — символ «-«
//         // (\d{2}) — группа, соответствующая 2 цифрам (месяц)
//         // — — символ «-«
//         // (\d{2}) — группа, соответствующая 2 цифрам (день)
//         // $ — конец строки

// let match = date.match(regex); //match() возвращает массив если есть соотв-е в регулярном выражении. 
// let formattedDate = match[3] + ":" + match[2] + ":" + match[1];// создаем новую строку в нужном формате.
// console.log(formattedDate); // "31.12.2025"

// }
// 3. Дана строка «Я учу javascript!». Вырежете из нее слово «учу» и слово 
// «javascript» тремя разными способами (через substr, substring, slice).
// {

  // let str1 = "Я учу javascript!";
  // console.log (str1.slice (2,16));
  // console.log (str1.substring (2,16));
  // console.log (str1.substr(2, 14));

// }
// 4. Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. Найдите квадратный корень 
// из суммы кубов его элементов. Для решения воспользуйтесь циклом for.
// {

// let arr2 = [4, 2, 5, 19, 13, 0, 10];
// let sum = 0;
//   for (let i = 0; i < arr2.length; i++) {
//     arr2[i] = Math.pow(arr2[i], 3);
//     sum += arr2[i];
//     result = Math.sqrt(sum);
//   }

// console.log("суммы кубов " + sum);
// console.log("квадратный корень " + result);


// }
// 5. Даны переменные a и b. Отнимите от a переменную b и результат 
// присвойте переменной c. Сделайте так, чтобы в любом случае в переменную 
// c записалось положительное значение. Проверьте работу скрипта при a и b, 
// равных соответственно 3 и 5, 6 и 1.
// {
  
//   let a = 33;
//   let b = 55;

//   let c = a - b;// первый вариант
//   if (c < 0) {
//     c = -c;
//     console.log(c);
  // } else {
//     console.log(c);
//   };

//  c1 = (Math.abs(a-b) ); // второй вариант
//  console.log(c1);


// }
// 6. Выведите на экран текущую дату-время в формате 12:59:59 31.12.2014. 
// Для решения этой задачи напишите функцию, которая будет добавлять 0 
// перед днями и месяцами, которые состоят из одной цифры (из 1.9.2014 
// сделает 01.09.2014).
// {
  //  let dateNow = new Date();

  // let a = dateNow.toLocaleTimeString();
  // let b = dateNow.getDate();
  // let c = dateNow.getMonth() + 1;

  // //console.log (a + ' ' + b + '.' + c + '.' + dateNow.getFullYear());//03:43:17 5.11.2023
  // console.log(
  //   dateNow.toLocaleTimeString() + " " + dateNow.toLocaleDateString()
  // ); //03:25:57 05.11.2023
  // function addDate(num) {
  //   if (num <= 9) {
  //     return (num = "0" + num);
  //   } else {
  //     return num;
  //   }
  // }

  // alert(
  //   addDate(a) +
  //     " " +
  //     addDate(b) +
  //     "." +
  //     addDate(c) +
  //     "." +
  //     dateNow.getFullYear()
  // );

// }
// }
// 7. Дана строка 'aa aba abba abbba abca abea'. Напишите регулярку, которая 
// найдет строки aba, abba, abbba по шаблону: буква 'a', буква 'b' любое 
// количество раз, буква 'a'.
// {

// let str4 = 'aa aba abba abbba abca abea';
// console.log (str4.match(/ab+a/g));


// }
// 8. Напишите ф-цию строгой проверки ввода номер телефона в 
// международном формате (<код страны> <код города или сети> <номер 
// телефона>). Функция должна возвращать true или false. Используйте 
// регулярные выражения.
// {
  function validPhone(phone) {
      regexp = /^\+?\d{3}\s?\-?\d{2}\s?\-?\d{3}\s?\-?\d{2}\s?\-?\d{2}/gm;
      // ^ - начало строки
      // + -так принято в междун. формате
      // d{3} - несколько цифр
      // \s?\ -есть ли пробел
      // \-?\ - есть ли тире и т.д.
      // gm -глобальный многострочный поиск
      return regexp.test (phone);
   }
  console.log(validPhone('+37517309-2020'));


// }
// 9. Напишите ф-цию строгой проверки адреса эл. почты с учетом следующих 
// условия:
// - весь адрес не должен содержать русские буквы и спецсимволы, кроме 
// одной «собачки», знака подчеркивания, дефиса и точки;
// - имя эл. почты (до знака @) должно быть длиной более 2 символов, причем 
// имя может содержать только буквы, цифры, но не быть первыми и 
// единственными в имени;
// - после последней точки и после @, домен верхнего уровня (ru, by, com и т.п.)
// не может быть длиной менее 2 и более 11 символов. 

// Функция должна возвращать true или false. Используйте регулярные 
// выражения.
// {
  function validateEmail(email) {
    const regex = /^[a-zA-Z]{1}[\w -\.]+@[a-zA-Z]{2,11}\.[a-zA-Z]{2,11}$/gm
    return regex.test(email);
    //[a-zA-Z]{1} первый символ будет буква, поэтому не будет пароль с одних цифр
    // [\w-\.]+   отвечает за проверку названия ящика(вкл. буквы и _)
    // «\w»       все латинские буквы, цифры и знак подчеркивания
    // -\.        знак тире и точку
    // +          после квадратных скобок указывает на возможность повторения символов
  }
  
  console.log(validateEmail("us-11@example.com"));


// }
// 10. Напишите ф-цию, которая из полного адреса с параметрами и без, 
// например: https://tech.onliner.by/2018/04/26/smart-do-200/? 
// utm_source=main_tile&utm_medium=smartdo200#zag3 , получит адрес 
// доменного имени (https://tech.onliner.by), остальную часть адреса без 
// параметров (/2018/04/26/smart-do-200/), параметры 
// (utm_source=main_tile&utm_medium=smartdo200) и хеш (#zag3). В адресе 
// может и не быть каких-либо составляющих. Ф-ция должна возвращать 
// массив.
// {
let a = 'https://tech.onliner.by/2018/04/26/smart-do-200/?utm_source=main_tile&utm_medium=smartdo200#zag3';
let arr = [];
function validurl(fulladress) {
  let regexAddress = /^([a-zA-Z]{1,}\:(&|\/\/?)(\w+[\.\-\_]?){1,})/gm; //(https://tech.onliner.by)
  let regexAddressNoParameters = /(\/(\d+[-\.\/?]){1,}(&|\/?)(\w+[\.\-\_]?){1,})/gm; //(/2018/04/26/smart-do-200/)
  let regexAddressParameters = /\/\?(\w+[\.\-\_]?){1,}\=(\w+[\.\-\_]?){1,}\&(\w+[\.\-\_]?){1,}\=(\w+[\.\-\_]?){1,}/gm; //(utm_source=main_tile&utm_medium=smartdo200)
  let regexAddresHesh = /\#[a-z0-9]{1,}$/g;

  let arr1 = [
              regexAddress,
              regexAddressNoParameters,
              regexAddressParameters,
              regexAddresHesh,
             ];
             for (let i = 0; i <= arr1.length - 1; i++) {
                if (a.match(arr1[i])) 
                arr.push(a.match(arr1[i]));
                }
                return arr;
          }
          validurl(a);
          console.log(arr);
          console.log(
            `https://tech.onliner.by/2018/04/26/smart-do-200/?utm_source=main_tile&utm_medium=smartdo200#zag3`
            ) // сверяем адресс
// }
//    /^([a-zA-Z]{1,}\:(&|\/\/?)(\w+[\.\-\_]?){1,})(\/(\d+[-\.\/?]){1,}(&|\/?)(\w+[\.\-\_]?){1,})
//    \/\?(\w+[\.\-\_]?){1,}\=(\w+[\.\-\_]?){1,}\&(\w+[\.\-\_]?){1,}\=(\w+[\.\-\_]?){1,}/\#[a-z0-9]{1,}$/g;

// * Для быстрого составления регулярного выражения и проверки исп. онлайнсервис https://regex101.com/.
